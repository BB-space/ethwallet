package com.zhgtrade.ethereum.wallet;

import com.alibaba.druid.util.StringUtils;
import com.zhgtrade.ethereum.wallet.model.Account;
import com.zhgtrade.ethereum.wallet.model.Token;
import com.zhgtrade.ethereum.wallet.utils.AccountUtils;
import com.zhgtrade.ethereum.wallet.utils.TokenUtils;
import com.zhgtrade.ethereum.wallet.utils.Web3jUtils;
import org.bouncycastle.util.encoders.Hex;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.request.RawTransaction;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthEstimateGas;
import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
import org.web3j.tx.ManagedTransaction;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;
import org.apache.log4j.Logger;

import java.math.BigInteger;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * 招股金服
 * CopyRight : www.zhgtrade.com
 * Author : 林超（362228416@qq.com）
 * Date： 2017-08-10 19:34
 */
public class AggregateAmountTask implements Runnable {

    private Logger log = Logger.getLogger(getClass().getName());

    public void sendTransactionGas(Token token) {
        if (AccountUtils.ETHER_TYPE.equals(token.getType())) {
            return;
        }

        try {
            log.info("send transaction gas to " + token.getName() + " address");
            List<Account> accounts = AccountUtils.listAccounts(token.getId().toString());
            Token ethToken = TokenUtils.getToken(AccountUtils.getDefaultIdentify());

            accounts.forEach(account -> {
                Double amount = Double.valueOf(account.getAmount());
                if (amount > token.getMinCount()) {
                    Web3j web3j = Web3jUtils.getWeb3j();
                    try {
                        EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount(token.getMainAccount(), DefaultBlockParameterName.PENDING).sendAsync().get();
                        BigInteger nonce = ethGetTransactionCount.getTransactionCount();
                        BigInteger gasPrice = web3j.ethGasPrice().sendAsync().get().getGasPrice();
                        Transaction mockTx = Transaction.createContractTransaction(account.getAddress(), nonce, gasPrice, "");
                        EthEstimateGas estimateGas = web3j.ethEstimateGas(mockTx).sendAsync().get();
                        BigInteger gas = estimateGas.getAmountUsed();
                        if(!StringUtils.isEmpty(token.getLimitGas()+"")){
                            gas = gas.add(new BigInteger(token.getLimitGas()+""));
                        }
                        BigInteger ethBalance = web3j.ethGetBalance(account.getAddress(), DefaultBlockParameterName.LATEST).sendAsync().get().getBalance();

                        BigInteger fee = gasPrice.multiply(gas);
                        if (ethBalance.compareTo(fee) == -1) {
                            BigInteger requireFee = fee.subtract(ethBalance);
                            String requireFeeStr = Convert.fromWei(requireFee.toString(), Convert.Unit.ETHER).toPlainString();
                            log.info("send transaction gas requireFee"+ requireFeeStr +" to " + token.getName() + " address");
                            AccountUtils.unLockAccount(ethToken.getMainAccount(), token.getMainPassword(), 30);
                            AccountUtils.sendTransaction(ethToken.getId() + "", account.getAddress(), requireFeeStr, "transaction gas fee");
                            AccountUtils.lockAccount(ethToken.getMainAccount());
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void sendTransactionGas() {
        try {
            List<Token> tokens = TokenUtils.getTokens();
            tokens.forEach(token -> sendTransactionGas(token));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void toMainWallet(Token token) {
        try {
            log.info("send transaction  " + token.getName() + " toMainWallet");
            List<Account> accounts = AccountUtils.listAccounts(token.getId().toString());
            Web3j web3j = Web3jUtils.getWeb3j();
            BigInteger gasPrice = web3j.ethGasPrice().sendAsync().get().getGasPrice();
            accounts.forEach(account -> {
                Double amount = Double.valueOf(account.getAmount());
                if (!account.getAddress().equals(token.getMainAccount()) && amount > token.getMinCount()) {
                    try {
                        log.info("send " + token.getName() + " transaction " + amount + " to mainAccoumt from " + account.getAddress());
                        AccountUtils.unLockAccount(account.getAddress(), token.getChildPassword(), 30);
                        if (AccountUtils.ETHER_TYPE.equals(token.getType())) {
                            // 以太坊
                            BigInteger leftAmount = Convert.toWei(amount.toString(), Convert.Unit.ETHER).toBigInteger().subtract(gasPrice.multiply(Transfer.GAS_LIMIT));
                            amount = Convert.fromWei(leftAmount.toString(), Convert.Unit.ETHER).doubleValue();
                            if (amount <= 0) {
                                log.info("eth amount less than fee");
                            } else {
                                AccountUtils.sendTransaction(token.getId().toString(), account.getAddress(), token.getMainAccount(), amount.toString(), null);
                            }
                        } else {
                            AccountUtils.sendTransaction(token.getId().toString(), account.getAddress(), token.getMainAccount(), amount.toString(), null);
                        }
                        AccountUtils.lockAccount(account.getAddress());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void toMainWallet() {
        try {
            List<Token> tokens = TokenUtils.getTokens();
            tokens.forEach(token -> toMainWallet(token));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        for (;;) {
            sendTransactionGas();
            try {
                Thread.sleep(1000 * 60 * 5);
            } catch (Exception e) {
                e.printStackTrace();
            }
            toMainWallet();
            try {
                Thread.sleep(1000 * 60 * 5);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Web3j web3j = Web3jUtils.getWeb3j();
        EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount("0xad489edb10a0f135e1cba6a3818029edaafe4a17", DefaultBlockParameterName.PENDING).sendAsync().get();
        BigInteger nonce = ethGetTransactionCount.getTransactionCount();
        BigInteger gasPrice = web3j.ethGasPrice().sendAsync().get().getGasPrice();
        Transaction mockTx = Transaction.createFunctionCallTransaction("0xad489edb10a0f135e1cba6a3818029edaafe4a17", nonce, gasPrice, null, "0xb485d02ec713cc0df5ecdcfaefaf0e8835a40dbf", Convert.toWei("500", Convert.Unit.GWEI).toBigInteger(), "");
//        Transaction mockTx = Transaction.createContractTransaction("0xad489edb10a0f135e1cba6a3818029edaafe4a17", nonce,gasPrice, "0xa9059cbb000000000000000000000000b485d02ec713cc0df5ecdcfaefaf0e8835a40dbf0000000000000000000000000000000000000000000000008ac7230489e80000");
        EthEstimateGas estimateGas = web3j.ethEstimateGas(mockTx).sendAsync().get();
        BigInteger gas = estimateGas.getAmountUsed();
        System.out.println(gas);
    }

}
